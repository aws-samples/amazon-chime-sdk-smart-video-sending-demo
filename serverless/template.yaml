AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Amazon Chime SDK Smart Video Sending Demo

Parameters:
  UseEventBridge:
    Description: Use EventBridge to process server side notifications
    Default: false
    Type: String
    AllowedValues: [true, false]
Conditions:
  ShouldUseEventBridge: !Equals [true, !Ref UseEventBridge]
Globals:
  Function:
    Runtime: nodejs12.x
    Timeout: 30
    MemorySize: 128
    Environment:
      Variables:
        MEETINGS_TABLE_NAME: !Ref Meetings
        ATTENDEES_TABLE_NAME: !Ref Attendees
        SQS_QUEUE_ARN: !GetAtt MeetingNotificationsQueue.Arn
        BROWSER_LOG_GROUP_NAME: !Ref ChimeBrowserLogs
Resources:
  ChimeMeetingsAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ChimeMeetingsAccess
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'chime:CreateMeeting'
              - 'chime:DeleteMeeting'
              - 'chime:GetMeeting'
              - 'chime:ListMeetings'
              - 'chime:BatchCreateAttendee'
              - 'chime:CreateAttendee'
              - 'chime:DeleteAttendee'
              - 'chime:GetAttendee'
              - 'chime:ListAttendees'
            Resource: '*'
      Roles:
        - Ref: ChimeSdkJoinLambdaRole
        - Ref: ChimeSdkAttendeeLambdaRole
        - Ref: ChimeSdkEndLambdaRole
        - Ref: ChimeSdkCreateMeetingLambdaRole
  CloudWatchAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CloudWatchAccess
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
              - 'logs:DescribeLogStreams'
            Resource: '*'
      Roles:
        - Ref: ChimeSdkBrowserLogsLambdaRole
  Meetings:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: 'Title'
          AttributeType: 'S'
        - AttributeName: 'Passcode'
          AttributeType: 'S'
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: 'Title'
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: 'Passcode'
          KeySchema:
            - AttributeName: 'Passcode'
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: 'TTL'
        Enabled: true
  Attendees:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: 'AttendeeId'
          AttributeType: 'S'
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: 'AttendeeId'
          KeyType: HASH
  MeetingNotificationsQueue:
    Type: AWS::SQS::Queue
  ChimeSdkIndexLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs12.x
      CodeUri: src/
      Events:
        RootApi:
          Type: Api
          Properties:
            Path: /
            Method: GET
        ProxyApi:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
  ChimeSdkCreateMeetingLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers.createMeeting
      CodeUri: src/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Meetings
      Environment:
        Variables:
          USE_EVENT_BRIDGE: !Ref UseEventBridge
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /meeting
            Method: POST
  ChimeSdkJoinLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers.join
      CodeUri: src/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Meetings
        - DynamoDBCrudPolicy:
            TableName: !Ref Attendees
      Environment:
        Variables:
          USE_EVENT_BRIDGE: !Ref UseEventBridge
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /join
            Method: POST
  ChimeSdkEndLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers.end
      CodeUri: src/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Meetings
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /end
            Method: POST
  ChimeSdkAttendeeLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers.attendee
      CodeUri: src/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Meetings
        - DynamoDBCrudPolicy:
            TableName: !Ref Attendees
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /attendee
            Method: GET
  ChimeSQSQueueLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers.sqs_handler
      CodeUri: src/
      Events:
        MeetingNotificationsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt MeetingNotificationsQueue.Arn
            BatchSize: 10
  ChimeEventBridgeLambda:
    Type: AWS::Serverless::Function
    Condition: ShouldUseEventBridge
    Properties:
      Handler: handlers.event_bridge_handler
      CodeUri: src/
      Events:
        ChimeEventBridgeEvent:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              source:
                - aws.chime
              detail-type:
                - 'Chime Meeting State Change'
  ChimeSdkBrowserLogsLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers.logs
      CodeUri: src/
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /logs
            Method: POST
  ChimeNotificationsQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - sqs:SendMessage
              - sqs:GetQueueUrl
            Principal:
              Service:
                - chime.amazonaws.com
            Resource: !GetAtt MeetingNotificationsQueue.Arn
      Queues:
        - Ref: MeetingNotificationsQueue
  ChimeBrowserLogs:
    Type: AWS::Logs::LogGroup

  #
  # Video Sending WebSocket Resources
  #

  VideoSendingConnections:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: 'ConnectionId'
          AttributeType: 'S'
        - AttributeName: 'MeetingId'
          AttributeType: 'S'
        - AttributeName: 'AttendeeId'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'ConnectionId'
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: 'MeetingIdIndex'
          KeySchema:
            - AttributeName: 'MeetingId'
              KeyType: HASH
            - AttributeName: 'AttendeeId'
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TimeToLiveSpecification:
        AttributeName: TTL
        Enabled: true
  VideoSendingWebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: VideoSendingWebSocketApi
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: '$request.body.message'
  VideoSendingConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref VideoSendingWebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref VideoSendingConnectIntegration
  VideoSendingConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref VideoSendingWebSocketApi
      Description: Video Sending Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations
  VideoSendingDisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref VideoSendingWebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref VideoSendingDisconnectIntegration
  VideoSendingDisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref VideoSendingWebSocketApi
      Description: Video Sending Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations
  VideoSendingSendRoute:
    Type: AWS::ApiGatewayV2::Route
    DependsOn:
      - VideoSendingSendIntegration
    Properties:
      ApiId: !Ref VideoSendingWebSocketApi
      RouteKey: sendmessage
      AuthorizationType: NONE
      OperationName: SendRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref VideoSendingSendIntegration
  VideoSendingSendIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref VideoSendingWebSocketApi
      Description: Video Sending Send Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendMessageFunction.Arn}/invocations
  VideoSendingPingRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref VideoSendingWebSocketApi
      RouteKey: ping
      AuthorizationType: NONE
      OperationName: VideoSendingPingRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref VideoSendingPingIntegration
  VideoSendingPingIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref VideoSendingWebSocketApi
      Description: Video Sending Ping Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${VideoSendingPingFunction.Arn}/invocations
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - VideoSendingConnectRoute
      - VideoSendingSendRoute
      - VideoSendingDisconnectRoute
      - VideoSendingPingRoute
    Properties:
      ApiId: !Ref VideoSendingWebSocketApi
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Prod
      Description: Prod Stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref VideoSendingWebSocketApi
  OnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: videoSending.onconnect
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref VideoSendingConnections
        - DynamoDBCrudPolicy:
            TableName: !Ref VideoSendings
        - Statement:
            - Effect: Allow
              Action:
                - 'execute-api:ManageConnections'
              Resource:
                - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${VideoSendingWebSocketApi}/*'
      Environment:
        Variables:
          CONNECTION_TABLE: !Ref VideoSendingConnections
          VIDEO_SENDINGS_TABLE: !Ref VideoSendings
  OnConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - VideoSendingWebSocketApi
      - OnConnectFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnConnectFunction
      Principal: apigateway.amazonaws.com
  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: videoSending.ondisconnect
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref VideoSendingConnections
        - DynamoDBCrudPolicy:
            TableName: !Ref VideoSendings
        - Statement:
            - Effect: Allow
              Action:
                - 'execute-api:ManageConnections'
              Resource:
                - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${VideoSendingWebSocketApi}/*'
      Environment:
        Variables:
          CONNECTION_TABLE: !Ref VideoSendingConnections
          VIDEO_SENDINGS_TABLE: !Ref VideoSendings
  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - VideoSendingWebSocketApi
      - OnDisconnectFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnDisconnectFunction
      Principal: apigateway.amazonaws.com
  SendMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: videoSending.sendmessage
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref VideoSendingConnections
        - DynamoDBCrudPolicy:
            TableName: !Ref VideoSendings
        - DynamoDBCrudPolicy:
            TableName: !Ref Attendees
        - Statement:
            - Effect: Allow
              Action:
                - 'execute-api:ManageConnections'
              Resource:
                - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${VideoSendingWebSocketApi}/*'
      Environment:
        Variables:
          CONNECTION_TABLE: !Ref VideoSendingConnections
          VIDEO_SENDINGS_TABLE: !Ref VideoSendings
          ATTENDEES_TABLE_NAME: !Ref Attendees
  SendMessagePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - VideoSendingWebSocketApi
      - SendMessageFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SendMessageFunction
      Principal: apigateway.amazonaws.com
  VideoSendingPingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: videoSending.ping
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref VideoSendingConnections
        - Statement:
            - Effect: Allow
              Action:
                - 'execute-api:ManageConnections'
              Resource:
                - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${VideoSendingWebSocketApi}/*'
      Environment:
        Variables:
          CONNECTION_TABLE: !Ref VideoSendingConnections
  VideoSendingPingPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - VideoSendingWebSocketApi
      - VideoSendingPingFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref VideoSendingPingFunction
      Principal: apigateway.amazonaws.com

  VideoSendings:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: 'MeetingId'
          AttributeType: 'S'
        - AttributeName: 'AttendeeId'
          AttributeType: 'S'
        - AttributeName: 'SendingTime'
          AttributeType: 'N'
      KeySchema:
        - AttributeName: 'MeetingId'
          KeyType: HASH
        - AttributeName: 'AttendeeId'
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      GlobalSecondaryIndexes:
        - IndexName: 'TimeIndex'
          KeySchema:
            - AttributeName: 'MeetingId'
              KeyType: HASH
            - AttributeName: 'SendingTime'
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      TimeToLiveSpecification:
        AttributeName: TTL
        Enabled: true

Outputs:
  ApiURL:
    Description: 'API endpoint URL for Prod environment'
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/'
  VideoSendingWebSocketURI:
    Description: 'The Video Sending WSS Protocol URI to connect to'
    Value: !Join ['', ['wss://', Ref: VideoSendingWebSocketApi, '.execute-api.', Ref: 'AWS::Region', '.amazonaws.com/', Ref: 'Stage']]
